name: Dev Container Build and Push Image

on:
  push:
    tags:
      - "v*.*.*"
env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BASE: ${{ github.repository_owner }}/multitool-devcontainer

jobs:
  prepare:
    name: Prepare Build Info
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.prep.outputs.VERSION_TAG }}
      image_name_full: ${{ steps.prep.outputs.IMAGE_NAME_FULL }}
    steps:
      - name: Prepare Tags and Image Names
        id: prep
        run: |
          TAG_NAME="${{ github.ref_name }}"
          VERSION_TAG="${TAG_NAME#v}"
          IMAGE_NAME_FULL="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}"
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME_FULL=${IMAGE_NAME_FULL}" >> $GITHUB_OUTPUT
  build-amd64:
    name: Build linux/amd64
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      contents: read
      packages: write
      actions: read
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push linux/amd64
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ needs.prepare.outputs.image_name_full }}
          cacheFrom: ${{ needs.prepare.outputs.image_name_full }}
          imageTag: ${{ needs.prepare.outputs.version_tag }}-amd64
          push: always

  build-arm64:
    name: Build linux/arm64
    runs-on: ubuntu-latest
    # M1 mac doesnt support docker. We can fix this later
    needs: prepare
    permissions:
      contents: read
      packages: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push linux/arm64 using devcontainers/ci
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ needs.prepare.outputs.image_name_full }}
          cacheFrom: ${{ needs.prepare.outputs.image_name_full }}
          imageTag: ${{ needs.prepare.outputs.version_tag }}-arm64
          platform: "linux/arm64"
          push: always
  
  create-manifest:
    name: Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [prepare, build-amd64, build-arm64]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and Push Multi-Arch Manifest
        run: |
          # Reconstruct the full source and target tags using prepare job outputs
          AMD64_TAG="${{ needs.prepare.outputs.image_name_full }}:${{ needs.prepare.outputs.version_tag }}-amd64"
          ARM64_TAG="${{ needs.prepare.outputs.image_name_full }}:${{ needs.prepare.outputs.version_tag }}-arm64"
          RELEASE_TAG_VERSION="${{ needs.prepare.outputs.image_name_full }}:${{ needs.prepare.outputs.version_tag }}"
          RELEASE_TAG_LATEST="${{ needs.prepare.outputs.image_name_full }}:latest"

          echo "Creating manifest: ${RELEASE_TAG_VERSION}"
          echo "Creating manifest: ${RELEASE_TAG_LATEST}"
          echo "Source AMD64: ${AMD64_TAG}"
          echo "Source ARM64: ${ARM64_TAG}"

          docker buildx imagetools create \
            --tag ${RELEASE_TAG_VERSION} \
            --tag ${RELEASE_TAG_LATEST} \
            ${AMD64_TAG} \
            ${ARM64_TAG}

          echo "Done"


